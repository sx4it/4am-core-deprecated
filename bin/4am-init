#!/usr/bin/env python2.7 -tt
# -*- coding: utf-8 -*-
# Open Source Initiative OSI - The MIT License (MIT):Licensing
#
# The MIT License (MIT)
# Copyright (c) 2012 sx4it (contact@sx4it.com)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import print_function
import logging
import os
import sys
import argparse

import database
from database.entity import *
from sqlalchemy import exc
from common import config

logger = logging.getLogger(__name__)

parser = argparse.ArgumentParser(description='Pushes a key')
parser.add_argument("-k", "--key", metavar="path", type=file,
                    required=True, help="key path")
parser.add_argument("-u", "--user", metavar="username",
                    default=os.getenv('USER'),
                    help="username to create (default to your username)")
parser.add_argument('-c', '--config', metavar='configfile',
                    default='~/.4am.conf',
                    help='An alternate path to the configuration file (default \
                    to ~/.4am.conf)')
parser.add_argument('-d', '--debug', action='store_true',
                    help='activate debug mode', default=False)
parser.add_argument('--database-port', metavar='portnb', type=int,
                    help='the database port')
parser.add_argument('--database-ip', metavar='ip',
                    help='the database ip')
parser.add_argument('--database-user', metavar='user',
                    help='database user')
parser.add_argument('--database-pass', metavar='pass',
                    help='database pass')
parser.add_argument('--database-name', metavar='name',
                    help='database name')
parser.add_argument('--database-driver', metavar='driver',
                    help='database driver (mysql|postgresql)')

def main():
    args = parser.parse_args()
    cfg = config.AmConfigParser(args)
    cfg.read(os.path.expanduser(args.config))
    if cfg.getdebug():
        logging.basicConfig(level=logging.DEBUG)
    try:
        db_url = cfg.getdburl()
    except config.InvalidOptionError as e:
        print('An option is invalid : "{0}"'.format(e), file=sys.stderr)
        return 1
    db_session = database.Session(db_url)
    firstname = "Sx4it" + args.user
    lastname = args.user  + "Sx4it"
    mail = args.user + '@sx4it.com'
    password = args.user
    keyname = args.user + "_laptop"
    keyline = args.key.read()
    keytype = keyline.split()[0]
    key = keyline.split()[1]
    user1 = user.User(args.user, firstname, lastname, mail, password)
    user1.userkey = [userKey.UserKey(keyname, key, keytype)]
    try:
        db_session._userRequest.addUser(user1)
        print('User {0} successfuly initiated.'.format(args.user))
    except exc.IntegrityError as e:
        print('Failure: does the user already exist ?', file=sys.stderr)
        logger.debug('Failure: does the user already exist ?\n"{0}"'.format(e))
        return 1
    except exc.SQLAlchemyError as e:
        print('Failure: Failed to create user {0} "{1}"'.format(args.user, e), file=sys.stderr)
        return 1
    except:
        print("Unexpected error: '{0}'".format(sys.exc_info()[1]))
        return 1
    return 0

if __name__ == '__main__':
    sys.exit(main())
