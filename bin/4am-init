#!/usr/bin/env python2.7

from database.entity import *
import os, sys

from common.sx4itconf import Sx4itConf

import database
from optparse import OptionParser
from sqlalchemy import exc

parser = OptionParser()
parser.add_option("-p", "--key-path", dest="key_path",
      help="key path", metavar="PATH", default="~/.ssh/id_rsa.pub")
parser.add_option("", "--database-port", dest="database_port",
      help="database port", metavar="PORT_NB")
parser.add_option("", "--database-ip", dest="database_ip",
      help="database ip", metavar="IP")
parser.add_option("", "--database-user", dest="database_user",
      help="database user", metavar="USER")
parser.add_option("", "--database-pass", dest="database_pass",
      help="database pass", metavar="PASS")
parser.add_option("", "--database-name", dest="database_name",
      help="database name", metavar="NAME")
parser.add_option("", "--database-controller", dest="database_controller",
      help="database controller", metavar="controller")

#TODO CLEANN !!!
try:
  Sx4itConf.opts.addArgsParser(parser)
  print Sx4itConf.opts
  db_session = database.InitSession(Sx4itConf.opts)
except Sx4itConf.UsageException as e:
  print "Error !", e
  parser.print_help()
  sys.exit(1)

login = os.getenv('USER')
firstname = "Sx4it" + login
lastname = login  + "Sx4it"
mail = login + '@sx4it.com'
password = login
keyname = login + "_laptop"
keytype = "rsa"

def loadkey(key):
  b = open(os.path.expanduser(key)).read().split()[1]
  return b

key = loadkey(Sx4itConf.opts["key_path"])

user1 = user.User(login, firstname, lastname, mail, password)
user1.userkey = [userKey.UserKey(keyname, key, keytype)]

try:
  db_session._userRequest.addUser(user1)
  print "User %s successfuly initiated."%login
except exc.IntegrityError as e:
        print "\nFAILURE => %s."%e.message
except exc.SQLAlchemyError as err:
  print "\nFAILURE => Failed to init with login %s: %s."%(login, err)
except:
  print "Unexpected error:", sys.exc_info()
