#!/usr/bin/env python2.7 -tt
# -*- coding: utf-8 -*-
# Open Source Initiative OSI - The MIT License (MIT):Licensing
#
# The MIT License (MIT)
# Copyright (c) 2012 sx4it (contact@sx4it.com)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import print_function
import logging
import sys
import os
import argparse

from controller.server import Server
from common import config

parser = argparse.ArgumentParser(
            description='Theses options are overwritting the default \
                        configuration file ("~/4am.conf"). If no configuration \
                        file is present, the server need theses values to be set.'
           ) #FIXME change the description

parser.add_argument('-c', '--config', metavar='configfile',
                    default='~/.4am.conf',
                    help='An alternate path to the configuration file (default \
                    to ~/.4am.conf)')
parser.add_argument('-d', '--debug', action='store_true',
                    help='activate debug mode', default=False)
parser.add_argument('--database-port', metavar='portnb', type=int,
                    help='the database port')
parser.add_argument('--database-ip', metavar='ip',
                    help='the database ip')
parser.add_argument('--database-user', metavar='user',
                    help='database user')
parser.add_argument('--database-pass', metavar='pass',
                    help='database pass')
parser.add_argument('--database-name', metavar='name',
                    help='database name')
parser.add_argument('--database-driver', metavar='driver',
                    help='database driver (mysql|postgresql)')

if __name__ == '__main__':
    args = parser.parse_args()
    cfg = config.AmConfigParser(args)
    cfg.read(os.path.expanduser(args.config))
    if cfg.getdebug():
        logging.basicConfig(level=logging.DEBUG)
    try:
        db_url = cfg.getdburl()
    except config.InvalidOptionError as e:
        print('An option is invalid : "{0}"'.format(e), file=sys.stderr)
        sys.exit(1)
    except config.MissingOptionError as e:
        print('{0}'.format(e), file=sys.stderr)
        sys.exit(1)
    try: 
        ctl_addr = cfg.get('controller', 'address')
        remote_addr = cfg.get('remoteexecd', 'address')
    except ConfigParser.NoOptionError as e:
        print('An option is missing : "{0}"'.format(e), file=sys.stderr)
    logging.info("Configuring server with {0}, {1}, {2}".format(ctl_addr,
                                                                remote_addr, db_url))
    try:
        Server.instance().configure(ctl_addr, remote_addr, db_url)
        Server.instance().run()
    except KeyboardInterrupt:
        logging.debug("Stopping controller.")
